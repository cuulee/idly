import * as fs from 'fs';
import { deepFreeze } from '../misc/deepFreeze';
import { Entity, Node, Way } from '../osm/structures';
import { createNode, createWay } from './validate/createEntity';
import { setCreate } from './helper';
import { genIndex, logCreate } from './log/index';

const smallDataset = (freeze: boolean = false): Entity[] =>
  fs
    .readFileSync('./src/state2/mosm.jsonl', 'utf-8')
    .split('\n')
    .map(r => JSON.parse(r) as any)
    .map(r => (freeze ? deepFreeze(r) : r));

const biglDataset = (freeze: boolean = false): Entity[] =>
  fs
    .readFileSync('./src/state2/osm.jsonl', 'utf-8')
    .split('\n')
    .map(r => JSON.parse(r) as any)
    .map(r => (freeze ? deepFreeze(r) : r));

describe('addVirginEntities', () => {
  it('should add entities', () => {
    const table = entityTableCreate();
    entityTableAddVirginEntities(table, smallDataset(), '2');
    expect(table).toMatchSnapshot();
  });
  it('should add entities', () => {
    const data = biglDataset();
    const state = State.create();
    entityTableAddVirginEntities(state.entityTable, data.slice(0, 1e5), '2');
    getEntitiesInQuadkey(state, '2');
  });
});

describe('removeVirginEntities', () => {
  it('should remove', () => {
    const table = entityTableCreate();
    entityTableAddVirginEntities(table, smallDataset(), '2');
    const toRemove = ['n4133782719', 'n4133782714'];
    expect(
      [...entityTableRemoveVirginIndexes(table, toRemove).values()].map(
        r => r.id
      )
    ).toEqual(
      smallDataset()
        .map(r => r.id)
        .filter(r => toRemove.indexOf(r) === -1)
    );
  });
});

describe('getEntitiesInQuadkey', () => {
  it('should get get quadkey data', () => {
    const state = State.create();
    const data = smallDataset();
    const count = 6;
    entityTableAddVirginEntities(
      state.entityTable,
      data.slice(0, count),
      '32220'
    );
    entityTableAddVirginEntities(state.entityTable, data.slice(count), '12020');
    expect(getEntitiesInQuadkey(state, '')).toHaveLength(data.length);
    expect(getEntitiesInQuadkey(state, '3')).toHaveLength(count);
    expect(getEntitiesInQuadkey(state, '1')).toHaveLength(data.length - count);
  });
});

describe('defaultChecks', () => {
  const setup = () => {
    const table = entityTableCreate();
    const log = logCreate();
    const data = smallDataset();
    entityTableAddVirginEntities(table, data, '32220');
    return { log, table, data, state: State.create(log, table) };
  };

  it('it throws when shape is malformed', () => {
    const { log, table, state } = setup();

    const check = (entities: any[]) =>
      defaultChecks(state, entities).cata(err => {
        throw err;
      }, es => es);

    const node = table.get('n4133782723') as Node;
    expect(() =>
      check([
        {
          ...node,
          id: genIndex('n-4')(log),
          loc: null,
        } as any,
      ])
    ).toThrowErrorMatchingSnapshot();
    expect(() =>
      check([
        {
          id: 'w-4#0',
        } as any,
      ])
    ).toThrowErrorMatchingSnapshot();
  });
  it('it throws when virgin', () => {
    const { table, state } = setup();
    const check = (entities: any[]) =>
      defaultChecks(state, entities).cata(err => {
        throw err;
      }, es => es);
    const node = table.get('n4133782723') as Node;
    expect(() =>
      check([
        {
          ...node,
          id: 'n-5',
        } as any,
      ])
    ).toThrowErrorMatchingSnapshot();
  });
  it('it throws when no parent', () => {
    const { table, state } = setup();
    const check = (entities: any[]) =>
      defaultChecks(state, entities).cata(err => {
        throw err;
      }, es => es);
    const node = table.get('n4133782723') as Node;
    expect(() =>
      check([
        {
          ...node,
          id: 'n-5#0',
        } as any,
      ])
    ).toThrowErrorMatchingSnapshot();
  });
});

describe('commitModifiedEntities', () => {
  const setup = (quadkey = '32220') => {
    const state = State.create();
    const data = smallDataset();
    entityTableAddVirginEntities(state.entityTable, data, quadkey);
    return { table: state.entityTable, log: state.log, state, data };
  };

  it('works with empty commit', () => {
    const { log, table } = setup();
    const commit = commitModifiedEntities(table);
    expect(commit(log, [])).toEqual([setCreate()]);
  });

  describe('it adds a modified node', () => {
    const quadkey = '230';
    const { log, table, state } = setup(quadkey);
    const commit = commitModifiedEntities(table);
    const node = table.get('n4133782723') as Node;

    const newNode = createNode({
      ...node,
      id: genIndex(node.id)(log),
      loc: {
        lat: 23,
        lon: 35,
      },
    });

    expect(newNode).toMatchSnapshot();

    const logv0 = commit(log, [newNode]);
    expect(logv0).toMatchSnapshot();

    it('shouldnt modify the table', () => {
      expect(table).toEqual(setup().table.set(newNode.id, newNode));
    });

    it('new node is searchable with al; quadkeys', () => {
      expect(
        getEntitiesInQuadkey(state, quadkey).find(r => r.id === newNode.id)
      ).toEqual(newNode);
    });

    it('new node showsup with other quadkey', () => {
      expect(getEntitiesInQuadkey(state, '1').map(r => r.id)).toEqual([
        newNode.id,
      ]);
    });

    it('old node doesnt show up in any case', () => {
      expect(
        getEntitiesInQuadkey(state, quadkey).find(r => r.id === node.id)
      ).toEqual(undefined);
      expect(
        getEntitiesInQuadkey(state, '').find(r => r.id === node.id)
      ).toEqual(undefined);
    });
  });

  describe('multiple same commits shouldnt change  table ', () => {
    const { log, table } = setup();
    const commit = commitModifiedEntities(table);
    const way = table.get('w411770875') as Way;
    const newWay = createWay({
      ...way,
      id: genIndex(way.id)(log),
      tags: {
        newTag: 'newValue',
      },
    });
    const logv0 = commit(log, [newWay]);
    const tv0 = JSON.stringify(table);
    it('should not throw error if log remains same', () => {
      expect(commit(log, [newWay])).toEqual(logv0);
    });
    it('table should remain unchanged', () => {
      expect(tv0 === JSON.stringify(table)).toBe(true);
    });
    it('should throw if the new log is fed with same entity', () => {
      expect(() => commit(logv0, [newWay])).toThrowError();
    });
  });

  it('doesnt modifies the table when wrong data', () => {
    const { log, table } = setup();
    const commit = commitModifiedEntities(table);
    const node = table.get('n4133782723') as Node;
    expect(() =>
      commit(log, [
        {
          ...node,
          id: 'n-5#0',
        } as any,
      ])
    ).toThrowErrorMatchingSnapshot();
    expect(table).toEqual(setup().table);
  });

  describe('multiple related modifications', () => {
    const { log, table } = setup();
    const commit = commitModifiedEntities(table);
    const n4133782723 = table.get('n4133782723') as Node;

    const n4133782723vv0 = {
      ...n4133782723,
      id: genIndex(n4133782723.id)(log),
      tags: { ...n4133782723.tags, t: 'skdjaslkjdn' },
    };

    const n12 = table.get('n12') as Node;
    const n12vv0 = {
      ...n12,
      id: genIndex(n12.id)(log),
      tags: { ...n12.tags, t: 's232edn2' },
    };

    expect(commit(log, [n4133782723vv0, n12vv0])).toEqual([
      setCreate([n4133782723vv0.id, n12vv0.id]),
    ]);
    expect(table).toEqual(
      setup()
        .table.set(n12vv0.id, n12vv0)
        .set(n4133782723vv0.id, n4133782723vv0)
    );
  });
  it('throws error when one of multiple related modifications is malformed', () => {
    const { log, table } = setup();
    const commit = commitModifiedEntities(table);
    const n4133782723 = table.get('n4133782723') as Node;
    const n12 = table.get('n12') as Node;
    expect(() =>
      commit(log, [
        {
          ...n4133782723,
          id: 'n31',
          tags: { ...n4133782723.tags, t: 'skdjaslkjdn' },
        },
        {
          ...n12,
          id: genIndex(n12.id)(log),
          tags: { ...n12.tags, t: 's232edn2' },
        } as any,
      ])
    ).toThrowErrorMatchingSnapshot();
  });

  describe('series of modification ', () => {
    const quadkey = '12';
    const { log, table, state } = setup(quadkey);
    const commit = commitModifiedEntities(table);
    const n12 = table.get('n12') as Node;
    const n12vv0 = createNode({
      ...n12,
      id: genIndex(n12.id)(log),
      tags: {
        newTag: 'v0',
      },
    });
    const logv0 = commit(log, [n12vv0]);

    it('first version', () => {
      expect(logv0).toEqual([setCreate([n12vv0.id])]);
    });

    const n12vv1 = createNode({
      ...n12,
      id: genIndex(n12vv0.id)(logv0),
      tags: {
        newTag: 'v1',
      },
    });
    const logv1 = commit(logv0, [n12vv1]);

    it('n12 v1', () => {
      expect(logv1).toEqual([setCreate([n12vv1.id]), setCreate([n12vv0.id])]);
    });

    it('doesnt let add older version', () => {
      expect(() => commit(logv1, [n12vv1])).toThrowErrorMatchingSnapshot();
      expect(() => commit(logv1, [n12vv0])).toThrowErrorMatchingSnapshot();
      expect(() => commit(logv0, [n12])).toThrowErrorMatchingSnapshot();
    });

    const n4133782723 = table.get('n4133782723') as Node;
    const n4133782723vv0 = {
      ...n4133782723,
      id: genIndex(n4133782723.id)(logv1),
      tags: { ...n4133782723.tags, t: 'v0' },
    };
    const n12vv2 = createNode({
      ...n12,
      id: genIndex(n12.id)(logv1),
    });

    const logv2 = commit(logv1, [n12vv2, n4133782723vv0]);

    it('12 v2 and n4133782723 v0', () => {
      expect(logv2).toEqual([
        setCreate([n12vv2.id, n4133782723vv0.id]),
        setCreate([n12vv1.id]),
        setCreate([n12vv0.id]),
      ]);
    });

    it('quadkey search should show modified up', () => {
      const searchResult = getEntitiesInQuadkey(state, quadkey).map(r => r.id);
      expect(searchResult).toContain(n4133782723vv0.id);
      expect(searchResult).toContain(n12vv2.id);
      expect(searchResult).not.toContain(n4133782723.id);
      expect(searchResult).not.toContain(n12vv1.id);
      expect(searchResult).not.toContain(n12vv0.id);
      expect(searchResult).not.toContain(n12.id);
    });

    it('quadkey search for different area should show modified entities', () => {
      const searchResult = getEntitiesInQuadkey(state, '3').map(r => r.id);
      expect(searchResult).toContain(n4133782723vv0.id);
      expect(searchResult).toContain(n12vv2.id);
      expect(searchResult).toHaveLength(2);
    });
  });
});

describe('addVirginEntities', () => {
  const setup = () => {
    const table = entityTableCreate();
    let log = logCreate();
    const data = smallDataset();
    entityTableAddVirginEntities(table, data, '12');

    const commit = commitModifiedEntities(table);

    const n4133782723 = table.get('n4133782723') as Node;
    const n12 = table.get('n12') as Node;

    const n4133782723vv0 = {
      ...n4133782723,
      id: genIndex(n4133782723.id)(log),
      tags: { ...n4133782723.tags, tag: 'n4133782723vv0' },
    };
    const n12vv0 = {
      ...n12,
      id: genIndex(n12.id)(log),
      tags: { ...n12.tags, t: 's232edn2' },
    };
    log = commit(log, [n4133782723vv0, n12vv0]);

    const way = table.get('w411770875') as Way;

    const newWay = createWay({
      ...way,
      id: genIndex(way.id)(log),
      tags: {
        newTag: 'newValue',
      },
    });

    log = commit(log, [newWay]);
    const n12vv1 = {
      ...n12,
      id: genIndex(n12.id)(log),
      tags: { ...n12.tags, t: 'n12vv1' },
    };

    log = commit(log, [n12vv1]);

    return { log, table, state: State.create(log, table) };
  };
  setup();
  it('adding virgin entities should work', () => {
    //
  });
});
